'''
CODE CHALLENGE: Implement GreedyMotifSearch.
    Input: Integers k and t, followed by a collection of strings Dna.
    Output: A collection of strings BestMotifs resulting from applying GreedyMotifSearch(Dna,k,t).
    If at any step you find more than one Profile-most probable k-mer in a given string, use the
    one occurring first.

Return to main text

Sample Input:

3 5
GGCGTTCAGGCA
AAGAATCAGTCA
CAAGGAGTTCGC
CACGTCAATCAC
CAATAATATTCG

Sample Output:

CAG
CAG
CAA
CAA
CAA
'''
from functools import reduce
k = 12
t = 25
dna = """
ATCGAACATGTCTTCGGGATGTATATACCACTCCGGCGTGTAAAGCGGGCCCCGGCCATGCTATAGGCCTGGGGTTGACGACAACCCGAGAGTAGAAGTTATATGAGATGCGGAGGCACGTGGATCTACGCTCTATCGACCATGTGGGATCCGAGT
CTATTCATGGACCGGAATAACCCTAGTCCGGACACTACTCCCGAGACCCAGACTTACCTCGCGACTAGGATTCTATATTTGCAACTGGGATTGTATCGTACTGGAAAGGCCTTTGCCATGTCAAAGATAGCACTATCTACCATGACCTGGGAAAAT
AATTGTTGTCCCTTCGGTCTCTAGGCCCTGCAGATCTCACCTCCCGGGTAGCTTATACGAACCATCATCCATGATCACGAGACAGGACTGCATAACCATCAATACCCGCCTGGCTTCGCGCTATCAAAGATGAGTCGAACCGGAACAAGGATCGGT
GCGCGCCTTGAGGTTGCTAATCCACCAATCGTACCAGGCACAGTCTCTAAGTCACACGCTCTATCGTGCATGCACTAACTAATAATCAGGGCTACCCAAGGATCGCCTTTACACCGACTACCACTGCAAGGCCCTGCGCAAAGCCCCTTCCAGTAT
CTATCAACTATGTGATTCCGCTAGAGGTAACAAACTTGTCCCTTAAACAATCCGCAATTCGCGTCGTCAATCGCTGTAATGTACAAACACCGGAATTGCGGATATATGAATGACTGATGACAAATGCATACTAGCACATGTCTGAGCATTCACAAG
ATGGCTGATAATAAATCTTGCAGGTGGCTAAGACTGTGGCCCACGCTCAATAATATCCCCGGGGTGATATACTATCCACTCCTCTGCTCCATGGTGCTTACAGAACAGCTATCGCGCATGCAAGGTTTCCCTGGCGCATATGCGGTACCTAAGACC
CTATCAGGAATGTACTCCTCTCGAGTTAATCAAATTCGTACCTAACTGCGCGACCCGGTCTTTCGTGGACAGGAGCGCACCGCGGTCCTTACCCTCGGGAATCATACTCACGCGCGGCTCCGACGCGACTGGTAGCTAATGCCGACACCCCGTTAC
GCATCACTCGCCCTTCGGAGTAGTCGCAGCTTGTTACTGAGGGTACAACTATCCTCCATGGTCTGATGATACGGTGGCCACGTCGGGGTAGGGCACTAACCCTGCTCCTTTTCTTGGTAAGTCTTGCTATAGACGCGCTCATAAAACGTGTCGAAT
TCACGATCTCCATTTCAACGTTGGTCACGAAACGCCCCGGAAATGATAGTCAAGCGCCCGCTATCCTCAATGGGACAGGATAACAGGCTGACCGAAAAAATCTTTCTACACTTTAGGGTCGGACCAGAGCAGTGATGTGAGGGGATGCCGGAGTAT
CTTGCAAGGCCTTCTAGGTCAGGAAGTTTACGTTCTGGACCACATTTGCATGGCCTGACTATCTCAGAGACATAGTCTATTAGTCTATCTATAATGTGAGTGTCATCCGACTTGCCCGGTAAACACAAGTAGTAAAGTTCTACAACTGTTTTTAAC
CCTGAATCCGATCGGTGGTCAACTCCTAGAGGCAGGCCCCGGATACGCAAGCAACCTGACCTATCGGCAATGGTTGTACCTTGGGACGGACCGAAACCCAAAAGAACGCAGCTTTCCCCTTGGGGACCACCGGTGGTCATGTTCCCGCCGTTTGAG
CTCCGCCATGTTCACTCCAAGGCAGTCAAATCCTCTCAGGTAACTTATCGTCATACGAAATTACACGTGCCCAAATTAAGATTGGAGCTACATTGCCTCACACCAACAGTAGTCAGGCCCCTATCAACAATGCTTCGCTACCTGGTCTGCTAACGA
CGGGCAGCGTTATCGCAGGTGGCTTGATTTGCTAATGACCTCTCCTTTAGCGATTCCTGCTGACCTACATAACTATCGCTGATGACTTTTAAGGCCAGTGGACTCTCTCACGGCAGGCGGCGGCCCCTCGAACTTAAATCATGTGACCGGCGCTCA
GCACTTGGATCAATGCCGTGTCTACATTACTAGCGCTGTAGCCAGAACCGGAGAAGAGTATCCTACTGGGGCCGATTCTTCCACAAAATAGGACTCGAGTAATGGCATCTCTGAGGGATTTTTGGGCTTTCGTCGAAGTTTGAGCTATCTTGCATG
GGGCTTATTTCCGGCCAGATATTCCCCCACGCATATTCAGGTAGAGAGCTATCGTTGATGAATGGACCCTTACCGGGTTCAGACATGCTTCTTAATTTAGACCCGAAATTGCTATTACATCCCTTCGTATTGCCCACCACCTTTTCAGGAAACGTC
CGTACCTCGCACCCATCCTGGTTGAACCATTTTGATCCGAAGAAATTTTAATAGTTACGGTATAAGGGGTGTATGCTATCTGCTTTGGATCTCAGGCATAAGGTCTATTCCAACAAGGTGCTATCTGAGATGTGGCAACCGCCGTGTGAGAGTGGA
ATTTGCCCCCATAGGATTCTACCACCTATGCATTAATTTTTTTTTAGGGCGTACTTGGTCCCTGGAGTGGGCCCGAACTCAAGACTGTAAAGGGTGGCTTTAACTTGTCTTACGTACGAATCTAGGCCTTCGTGCAGTCGGGACCTATCGACGATG
CGAATCACTCTATTACTCAATAAGGCCAGTCAGATCAATGGGTAATGGCCCGTCTATAGAGAGTTTTGCGTTTCTCGTCTACTAGACAGTTTAAAGTGTCACAACAAGTTCAAGCTATAACTTATCTGAACGGACAGCATCAGGCTATCAACTATG
CCATATACTCCCGCAACCCGAGAAAGTAAGGACCGTGGAGAAATGGTTTCTACCGCTGATTAAGTGAGAGGGTGAAAACCACTACTCGCAGGTGGACGCCAATAACCACTATCATGGATGACATTCGGGGGTTGGACACGGCACCGTAGGTCATCC
GAGTCTGTGTCCTTCCATGAGAGGGAGCCAAGCCGCAGGTCTAACCACGACTTCTTTATGTGCAGGACTACATATCGTTTGTATGTATTTGATTATCACGTCGTTATCTTCCTCAGTAATCTATCGTGAATGGGTCCTTACTACGACTTGGTTCGC
GCGATCTCGGTGGCCTTGTGCTTTCTAGTACACGCATGGCCGCCAACTAATTCCTTAACAGCAATGGTTGTCTTTGAGCATGATAAGAGATTGGAAACATTGTCCTACCCCAGTCTATCTCTATCCTACATGGTTCCCAAAGCACCCCGGCCAGCA
CTTTCAACGAATATATGAATATGCTCACCGTGGAAGCACAGTGCCCATCGCGATGGCGCGCTACCGACCTTCAGATCTTTCCATCTATCTCCAATGAAGAAATTACCGCAGTTGACTCCCCCGGTTTCAACCAAGGTGCAGACACGTACCGAAAAA
GTTCGCGTAACGCTTATTGACGTCGGCTCTGTACGCGCAGCGCGCCTTACATAGACGACCTGCTTATTACAGGGCTTGCCTGTTCCTGCTCTACCTGGGGTAGGTGGCCTATCAAACATGGATTGAGCCTACAAACCTAAAACTACGAGGCGTAGG
ACCTACGGGACCAAGGTTCATGGGAGCTGTGCGCGCCGATTGAAGCCGACCACTACCACGTGGTCTCATGGCTTATGACTTTGCCGGTCGGTTACGCTATCCCGAATGAAAACATCGGCAACTTTCCATTACCTGAGGAGCTCCAAATAGAACGAC
CAGGGCCCTGCCCATCAAAATCAAGGACAGCCGCTACCGAACTCCGAAGGCCTGCCTAAATATACGGGCCATACTAGCCCTTACCTATCTCGCATGACTCGGACCGCAGGCCAGTCCTGTGCGAGAGTTATCCTGACGGGGGGATTGGTGCTGCCA
"""
dna = [s for s in dna.split() if s]
positions = {'A': 0, 'C': 1, 'G': 2, 'T': 3}


def get_prob(kmer, profile):
    return reduce(lambda x, y: x * y,
                  [profile[j][positions[c]]
                   for j, c in enumerate(list(kmer))])


def find_best_kmer(text, k, profile):
    best_kmer, best_prob = text[:k], 0
    for i in range(len(text) - k + 1):
        kmer = text[i: i+k]
        prob = get_prob(kmer, profile)
        if prob > best_prob:
            best_kmer, best_prob = kmer, prob
    return best_kmer


def form_profile(kmers):
    profile = [[0, 0, 0, 0] for i in range(len(kmers[0]))]
    for kmer in kmers:
        for i, c in enumerate(kmer):
            profile[i][positions[c]] += 1
    for i, freqs in enumerate(profile):
        for f in range(len(freqs)):
            profile[i][f] /= float(len(kmers))
    return profile


def get_motifs_score(motifs):
    return len(motifs[0]) - sum([max(p) for p in form_profile(motifs)])


best_score, result = k, []
for i in range(len(dna[0]) - k + 1):
    best_motifs = [dna[0][i:i+k]]
    profile = form_profile(best_motifs)
#    print 'initial profile: %s' % profile
    for t in range(1, len(dna)):
        kmer = find_best_kmer(dna[t], k, profile)
        best_motifs.append(kmer)
        profile = form_profile(best_motifs)
    score = get_motifs_score(best_motifs)
    print  ('best_motifs: %s, score: %s' % (best_motifs, score))
    if score < best_score:
        best_score, result = score, best_motifs
print ('best score: %s' % best_score)
print ('\n'.join(result))